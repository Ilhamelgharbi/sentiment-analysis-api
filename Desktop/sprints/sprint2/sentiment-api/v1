from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from transformers import pipeline
from fastapi.responses import HTMLResponse

app = FastAPI(title="Sentiment Analysis API")

# Load model once
sentiment_pipeline = pipeline(
    "sentiment-analysis",
    model="distilbert-base-uncased-finetuned-sst-2-english"
)

# Pydantic model for request validation
class PredictRequest(BaseModel):
    text: str

# Root route: simple HTML page
@app.get("/", response_class=HTMLResponse)
def root():
    return """
    <html>
        <head><title>Sentiment Analysis</title></head>
        <body>
            <h1>Sentiment Analysis API</h1>
            <form id="form">
                <textarea id="text" placeholder="Enter text here"></textarea><br>
                <button type="button" onclick="analyze()">Analyze</button>
            </form>
            <pre id="result"></pre>
            <script>
                async function analyze() {
                    const text = document.getElementById('text').value;
                    const res = await fetch('/predict', {
                        method: 'POST',
                        headers: {'Content-Type':'application/json'},
                        body: JSON.stringify({text})
                    });
                    const data = await res.json();
                    document.getElementById('result').textContent = JSON.stringify(data, null, 2);
                }
            </script>
        </body>
    </html>
    """

# POST /predict endpoint
@app.post("/predict")
def predict(req: PredictRequest):
    text = req.text.strip()
    if not text:
        raise HTTPException(status_code=400, detail="Text cannot be empty")
    result = sentiment_pipeline(text)[0]
    return {"label": result["label"], "score": round(result["score"], 4)}
